using System;
using System.Text;
using Newtonsoft.Json.Linq;
using Newtonsoft.Json;
using Stylelabs.M.Base.Querying;
using Stylelabs.M.Sdk.Contracts.Base;
using Stylelabs.M.Sdk.Models.Content;
using Stylelabs.M.Sdk.WebClient;
using Stylelabs.M.Sdk.WebClient.Authentication;
using Stylelabs.M.Sdk.WebClient.Http;
using Stylelabs.M.Base.Web.Api.Models;
using Stylelabs.M.Sdk.WebClient.Contracts.Audit;
using Tavis.UriTemplates;
using static System.Net.WebRequestMethods;
using CHInheritanceTree;

namespace Stylelabs.M.WebSdk.Examples
{
    public class Program
    {
        static async Task Main(string[] args)
        {
            // String filter
            Console.WriteLine("Filter for entities (start of name) e.g: TEST or leave blank for all");

            // Create a string variable and get user input from the keyboard and store it in the variable
            string filter = Console.ReadLine();

            var startup = new Startup();

            // Your Sitecore Content Hub endpoint to connect to
            Uri url = new Uri(startup.ApiSettings.Url);
            // Enter your credentials here
            OAuthPasswordGrant oauth = new OAuthPasswordGrant
            {
                ClientId = startup.ApiSettings.ClientId,
                ClientSecret = startup.ApiSettings.ClientSecret,
                UserName = startup.ApiSettings.UserName,
                Password = startup.ApiSettings.Password
            };

            Console.WriteLine($"Connecting to Content Hub - {url}");

            IWebMClient? client = null;

            try
            {
                client = MClientFactory.CreateMClient(url, oauth);
                Console.WriteLine($"Successfully connected to Content Hub - {url}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Failed");
                Console.WriteLine(ex);
                Console.WriteLine(ex.Message);
                throw;
            }

            var endPointLink = new Link(url + "api/entitydefinitions","", true);
            var bindings = new Dictionary<string, string>();
            var endpoint = endPointLink.Bind(bindings);
            var keepGoing = true;
            var result = new List<EntityDefinition>();

            Console.WriteLine($"Getting all entity definitions");

            while (keepGoing)
            {
                var response = await client.Raw.GetAsync(endpoint).ConfigureAwait(false);
                response.EnsureSuccessStatusCode();
                var businessAuditQuery = await response.Content.ReadAsJsonAsync<EntityDefinitionQuery>().ConfigureAwait(false);

                result.AddRange(businessAuditQuery.Items);
                endpoint = businessAuditQuery?.Next?.Uri;
                keepGoing = businessAuditQuery?.Items?.Any() == true && businessAuditQuery.Next != null;
            }

            Console.WriteLine($"Found {result.Count} entity definitions");

            StringBuilder sb = new StringBuilder();
            StringBuilder relations = new StringBuilder();
            Dictionary<string,List<string>> additionalTables = new Dictionary<string, List<string>>();

            foreach (var entity in result.Where(x => x.Name.StartsWith(filter)))
            {
                sb.AppendLine(entity.Name.Replace(".", ""));

                foreach (var member in entity.MemberGroups)
                {
                    foreach (var relation in member.Relations.Distinct().GroupBy(p => p.Name).Select(g => g.First()))
                    {
                        if (relation?.Type == "Relation" && relation?.Definition != null)
                        {
                            var relationProperty = relation.Definition.href.Split('/').Last();
                            sb.AppendLine("  " + relation.Name.Replace(".", "") + " " + relation.Type + " fk " + relationProperty.Replace(".", "") + "." + relation.Name.Replace(".", ""));
                            
                            if (additionalTables.ContainsKey(relationProperty.Replace(".", "")))
                            {
                                additionalTables[relationProperty.Replace(".", "")].Add(relation.Name.Replace(".", ""));
                            }
                            else
                            {
                                additionalTables.Add(relationProperty.Replace(".", ""), new List<string> { relation.Name.Replace(".", "") });
                            }
                        }
                        else
                        {
                            sb.AppendLine("  " + relation.Name.Replace(".", "") + " " + relation.Type);
                        }
                    }
                }
                sb.AppendLine("  autoGeneratedName varchar");
            }

            foreach (var item in additionalTables.Where(x => !(x.Key.StartsWith(filter))))
            {
                relations.AppendLine(item.Key);

                foreach (var listItem in item.Value)
                {
                    relations.AppendLine("  " + listItem + " relation ");
                }
                sb.AppendLine();

            }

            Console.WriteLine("----------Output----------");
            Console.WriteLine(sb.ToString() + relations.ToString());
            Console.WriteLine("--------------------------");

            // Write the changes to file
            FileStream fileStream;
            StreamWriter writer;
            try
            {
                fileStream = new FileStream("./CHInheritanceTreeOutput.txt", FileMode.OpenOrCreate, FileAccess.Write);
                writer = new StreamWriter(fileStream);
            }
            catch (Exception e)
            {
                Console.WriteLine("Cannot open CHInheritanceTreeOutput.txt for writing");
                Console.WriteLine(e.Message);
                return;
            }

            writer.Write(sb.ToString());
            writer.Close();

            fileStream.Close();

            Console.WriteLine("File saved here - " + fileStream.Name);
            Console.WriteLine("Upload to new document using - https://azimutt.app/");
        }

        public class EntityDefinitionQuery
        {
            [JsonProperty(PropertyName = "items")]
            public List<EntityDefinition> Items { get; set; }
            [JsonProperty(PropertyName = "total_items")]
            public int TotalItems { get; set; }
            [JsonProperty(PropertyName = "returned_items")]
            public int ReturnedItems { get; set; }
            [JsonProperty(PropertyName = "next")]
            public Link Next { get; set; }
        }

        public class EntityDefinition
        {
            [JsonProperty(PropertyName = "id")]
            public string Id { get; set; }
            [JsonProperty(PropertyName = "name")]
            public string Name { get; set; }
            [JsonProperty(PropertyName = "member_groups")]
            public List<MemberGroups> MemberGroups { get; set; }
            //[JsonProperty(PropertyName = "timestamp")]
            //public DateTime? TimeStamp { get; set; }
            //[JsonProperty(PropertyName = "user_id")]
            //public long? UserId { get; set; }
            //[JsonProperty(PropertyName = "username")]
            //public string Username { get; set; }
        }

        public class MemberGroups
        {
            [JsonProperty(PropertyName = "name")]
            public string Name { get; set; }
            [JsonProperty(PropertyName = "members")]
            public List<PropertyRelations> Relations { get; set; }
        }

        public class PropertyRelations
        {
            [JsonProperty(PropertyName = "type")]
            public string Type { get; set; }
            [JsonProperty(PropertyName = "name")]
            public string Name { get; set; }
            [JsonProperty(PropertyName = "role")]
            public string Role { get; set; }
            [JsonProperty(PropertyName = "cardinality")]
            public string Cardinality { get; set; }
            [JsonProperty(PropertyName = "associated_entitydefinition")]
            public AssociatedDefinition Definition { get; set; }
        }

        public class AssociatedDefinition
        {
            [JsonProperty(PropertyName = "href")]
            public string href { get; set; }
        }
    }
}